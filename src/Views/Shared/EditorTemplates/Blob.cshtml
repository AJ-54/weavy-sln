@model Blob
@{
    var prop = ViewData.ModelMetadata.ContainerType.GetProperty(ViewData.ModelMetadata.PropertyName);
    var meta = ViewData.ModelMetadata;
    var state = ViewData.ModelState[ViewData.ModelMetadata.PropertyName];
    var feedback = state?.Errors?.FirstOrDefault()?.ErrorMessage;
    bool group = ViewData["FormGroup"] as bool? ?? !meta.HideSurroundingHtml;
    bool label = ViewData["FormLabel"] as bool? ?? !meta.HideSurroundingHtml;
    bool text = (ViewData["FormText"] as bool? ?? true) && meta.Description != null;
    bool remove = ViewData["Remove"] as bool? ?? true;
    bool required = ViewData["Required"] as bool? ?? prop.IsRequired();
    string id = ViewData.TemplateInfo.GetFullHtmlFieldId("");
    string name = ViewData.TemplateInfo.GetFullHtmlFieldName("");
    string displayName = ViewData["DisplayName"] as string ?? prop.DisplayName();
    string description = ViewData["DisplayDescription"] as string ?? meta.Description;
    int size = 128;

    var attrs = new Dictionary<string, object>();
    attrs["id"] = id;
    attrs["type"] = "file";
    attrs["class"] = "custom-file-input";
    if (feedback != null) {
        attrs.Append("class", "is-invalid");
    }

    if (prop.Extensions() != null) {
        attrs["accept"] = string.Join(", ", prop.Extensions().Split('|').Select(x => "." + x));
    }

    attrs["data-drop-zone"] = "#dz-" + id;

    if (prop.MaxSize() != null) {
        attrs["data-max-size"] = prop.MaxSize();
    }

    attrs["data-single-file-uploads"] = false;
    attrs["data-url"] = WeavyContext.ApplicationPath + "a/blobs";

    if (required) {
        attrs["required"] = null;
    }
    
    string placeholder = meta.Watermark ?? "Choose file";
    string placeholderImage = prop.PlaceholderImage() != null ? Url.Content(prop.PlaceholderImage()) : null;
    string previewImage = prop.Name == nameof(IHasAvatar.Avatar) && ViewData.ModelMetadata.Container is IHasAvatar parent ? parent.AvatarUrl(size) : Model?.ThumbUrl(size, size, retina: true, fit: FitMode.Crop, scale: ScaleMode.Both) ?? placeholderImage;
    string attributes = "";
    foreach (var attr in attrs) {
        attributes += " ";
        if (attr.Value == null) {
            attributes += attr.Key;
        } else {
            attributes += string.Concat(attr.Key, "=", @"""" + Html.AttributeEncode(attr.Value) + @"""");
        }
    }
}

@if (group) {
    WriteLiteral(@"<div class=""form-group"">");
}
@if (label) {
    @Html.Label(prop.DisplayName(), displayName)
}

<div class="file-upload" id="dz-@id">
    <input type="hidden" name="@name" value="@(Model != null ? Model.Id.ToString() : "delete")" />
    @if (placeholderImage != null) {
        <label class="custom-file custom-image">
            <img class="img-@size" src="@previewImage" data-thumb="@placeholderImage" alt="" width="@size" height="@size" />
            <span class="custom-file-label">@placeholder</span>
            <input @Html.Raw(attributes.Trim()) />
            <span class="progress invisible"><span class="progress-bar" role="progressbar"></span></span>
        </label>
    } else {
        <div class="custom-file">
            <input @Html.Raw(attributes.Trim()) />
            <label class="custom-file-label custom-file-control" for="@id">@(Model?.Name)</label>
        </div>
        <div class="progress invisible">
            <div class="progress-bar" role="progressbar"></div>
        </div>
    }
    <div class="invalid-feedback@(feedback != null ? " d-block" : "")">@feedback</div>
    <div class="form-text@(feedback != null ? " d-none" : "")">@description
    @if (remove) {
        <a href="javascript:;" class="clear@(Model == null ? " d-none" : "")">Remove @displayName.ToLower().</a>
    }
    </div>
</div>

@if (group) {
    WriteLiteral(@"</div>");
}
