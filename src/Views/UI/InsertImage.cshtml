@model AttachmentsModel
@using Weavy.Core.Utils;
@{
    Layout = "_Layout.cshtml";
    Title = Model.Image ? "Insert/edit image" : "Insert/edit file";
    var blobs = Model.Attachments.Select(x => x.Blob).Concat(Model.Blobs);
}

@section scripts {
    <script>
    var editorType = "@(Model.Markdown ? "markdown": "html")";

    $(function () {
        // insert click
        $(".ui-insertimage form.properties").on("submit", function (e) {

            if (editorType === "html") {
                e.preventDefault();
                e.stopPropagation();
                var props = getFileProperties();

                if (props.url.length > 0) {
                    window.parent.postMessage({
                        mceAction: 'insertImage',
                        props: props
                    }, '*');
                }

                var attachmentsRoot = $("#blobs", window.parent.document).empty();
                $(".result").find("input[type='hidden']").each(function (i, item) {
                    attachmentsRoot.append($("<input type='hidden' name='blobs' value='" + $(item).val() + "' />"));
                });

            }
        });

        $(".ui-insertimage #size button").click(function (e) {
            var sizer = $("#size button").removeClass("active");
            var props = getFileProperties();

            if (/\.(png|jpg|jpeg|gif)$/i.test(props.name)) {
                var size = $(this).attr("id");
                var url = props.file_url;
                switch (size) {
                    case "small":
                        url = props.thumb_url.replace("{options}", "240x0")
                        break;
                    case "medium":
                        url = props.thumb_url.replace("{options}", "640x0")
                        break;
                    case "large":
                        url = props.thumb_url.replace("{options}", "1024x0")
                        break;
                    case "original":
                    default:
                        url = props.file_url;
                        break;
                }

                $("input[name=url]").val(convertToRelativeUrl(url));
            }
        });

        $(".ui-insertimage .buttons .btn-secondary").on("click", function () {
            if (editorType === "html") {
                parent.tinymce.activeEditor.windowManager.close();
                return false;
            }
        });

         // click attachment
        $(".ui-insertimage .result").on("click", "a", function () {
            var props = new Object();
            props.name = $(this).data("name");
            props.file_url = $(this).data("file-url");
            props.thumb_url = $(this).data("thumb-url");
            props.width = $(this).data("width");
            props.height = $(this).data("height");
            setFileProperties(props);
        });

        $(".ui-insertimage input[type=file]").fileupload({
            dataType: "json",
            pasteZone: null,
            add: function (e, data) {
                var uploadErrors = [];
                var group = $(this).closest(".form-group");
                group.find(".help-block").text("");
                group.removeClass("has-error");

                // basic check for duplicate filenames
                var names = $.map($(".result [data-name]"), function (val, i) { return $(val).data("name"); });
                data.files.forEach(function (file) {
                    if (names.indexOf(file.name) !== -1) {
                        uploadErrors.push("There is already a file named " + file.name);
                    }
                });

                if (uploadErrors.length > 0) {
                    group.addClass("has-error");
                    group.find(".help-block").text(uploadErrors.join(" "));
                } else {
                    data.submit();
                }
            },
            progressall: function (e, data) {
                $(this).closest(".tab-content").children(".progress").css("width", parseInt(data.loaded / data.total * 100, 10) + "%").show();
            },
            done: function (e, data) {
                var group = $(this).closest(".form-group");
                group.removeClass("has-error");
                group.find(".help-block").text("");

                var container = $(".result");
                container.find(".remove").remove();

                // remove ?v= from thumburl since we don't want it here
                $.each(data.result.data, function (i, v) {
                    v.thumb_url = v.thumb_url.split('?')[0];
                });

                var html = "";
                data.result.data.forEach(function (f) {
                    html += '<div class="card mr-1" style="width: 96px;">' +
                        '<a href="javascript:;" class="thumbnail" data-name="' + f.name + '" data-file-url="' + f.file_url + '" data-thumb-url="' + f.thumb_url + '" data-width="' + f.width + '" data-height="' + f.height + '" title="' + f.name + '">' +
                        '<img src="' + f.thumb_url.replace("{options}", "96") + '" alt="" />' +
                        '<div class="card-block p-1">' +
                        '<small title="' + f.name + '">' + f.name + '</small>' +
                        '<input type="hidden" name="blobs" value="' + f.id + '" />' +
                        '</div>'
                    '</a>' +
                        '</div>';
                });
                container.prepend(html);
                $("#filecount").text(container.children().length);

                setFileProperties(data.result.data[0]);
            },
            fail: function (e, data) {
                //var json = JSON.parse(data.jqXHR.responseText);
            },
            always: function () {
                // reset progress bar
                $(this).closest(".tab-content").children(".progress").css("width", "0%").hide();
            }
        });

        if ($("#size").length > 0) {

            var url = $("input[name=url]").val()
            var width = $("input[name=width]").val()
            var height = $("input[name=height]").val()
            var sizer = $("#size button");
            sizer.removeClass("active");

            if (url.indexOf("1024x0") !== -1) {
                sizer.eq(2).addClass("active");
            } else if (url.indexOf("640x0") !== -1) {
                sizer.eq(1).addClass("active");
            } else if (url.indexOf("240x0") !== -1) {
                sizer.eq(0).addClass("active");
            } else if (url.indexOf("" + width + "x" + height) !== -1) {
                sizer.eq(3).addClass("active");
            }
        }

        function convertToRelativeUrl(url) {
            if (url && url.length) {
                var rootPath = location.protocol + "//" + location.hostname + wvy.config.applicationPath;
                return url.replace(rootPath, wvy.config.applicationPath);
            } else {
                return null;
            }
        }

        function setFileProperties(file) {

            var url = file.url || file.file_url;
            $("input[name=name]").val(file.name);
            $("input[name=url]").val(convertToRelativeUrl(url));
            $("input[name=alt]").val(file.description);
            $("input[name=file_url]").val(convertToRelativeUrl(file.file_url));
            $("input[name=thumb_url]").val(convertToRelativeUrl(file.thumb_url));
            $("input[name=width]").val(file.width);
            $("input[name=height]").val(file.height);

            // activate original size button
            $("button[name=size]").removeClass("active");
            $("button[name=size][id=original]").addClass("active");

            // select properties tab
            $("a[href='#nav-properties']").tab('show');
        }

        function getFileProperties() {
            var props = new Object();
            props.url = $("input[name=url]").val();
            props.description = $("input[name=alt]").val();
            props.name = $("input[name=name]").val();
            props.file_url = $("input[name=file_url]").val();
            props.thumb_url = $("input[name=thumb_url]").val();
            props.width = $("input[name=width]").val();
            props.height = $("input[name=height]").val();
            return props;
        }
    });

    </script>
}

<div class="container-fluid insert-image">

    <header class="page-header">
        @if (Model.Markdown) {
            <button type="button" class="btn btn-transparent pull-right" data-close title="Close">@Svg.Icon("close")</button>
            <div class="page-title">Insert image</div>
        }
        <nav class="nav nav-tabs" role="tablist">
            <a class="nav-item nav-link active" href="#nav-properties" data-toggle="tab">Properties</a>
            <a class="nav-item nav-link" data-toggle="tab" href="#nav-attachments">Attachments  (<span id="filecount">@(Model.Image ? blobs.Count(x => FileUtils.IsWebImage(x.Name)) : blobs.Count())</span>)</a>
            <a class="nav-item nav-link" href="#nav-upload" data-toggle="tab">Upload</a>
        </nav>

    </header>

    <div class="tab-content mt-3">
        <div class="tab-pane active" id="nav-properties">
            <form method="get" class="properties">

                <div class="form-group">
                    <label class="control-label" for="url">Url</label>
                    @Html.TextBox("url", Request.QueryString["src"] ?? Request.QueryString["href"], new { @class = "form-control", placeholder = Model.Image ? "Paste or type a link to an image..." : "Paste or type a link to a file..." })
                </div>

                @if (Model.Image) {
                    <div class="form-group">
                        <label class="control-label" for="alt">Description</label>
                        @Html.TextBox("alt", "", new { @class = "form-control" })
                    </div>

                    <div class="form-group" id="size">
                        <label class="control-label">Size</label><br />
                        <div class="btn-group" data-toggle="buttons">
                            <button type="button" name="size" id="small" class="btn btn-secondary">Small</button>
                            <button type="button" name="size" id="medium" class="btn btn-secondary">Medium</button>
                            <button type="button" name="size" id="large" class="btn btn-secondary">Large</button>
                            <button type="button" name="size" id="original" class="btn btn-secondary">Original</button>
                        </div>
                    </div>
                }

                @if (Model.SelectedAttachment != null) {
                    <input type="hidden" name="name" value="@Model.SelectedAttachment.Blob.Name" />
                    <input type="hidden" name="file_url" value="@Model.SelectedAttachment.ContentUrl()" />
                    <input type="hidden" name="thumb_url" value="@Model.SelectedAttachment.ThumbPlaceholderUrl().LeftBefore("?")" />
                    <input type="hidden" name="width" value="@(Model.SelectedAttachment.Blob.Width ?? 0)" />
                    <input type="hidden" name="height" value="@(Model.SelectedAttachment.Blob.Height ?? 0)" />
                } else if (Model.SelectedBlob != null) {
                    <input type="hidden" name="name" value="@Model.SelectedBlob.Name" />
                    <input type="hidden" name="file_url" value="@Model.SelectedBlob.ContentUrl()" />
                    <input type="hidden" name="thumb_url" value="@Model.SelectedBlob.ThumbPlaceholderUrl().LeftBefore("?")" />
                    <input type="hidden" name="width" value="@(Model.SelectedBlob.Width ?? 0)" />
                    <input type="hidden" name="height" value="@(Model.SelectedBlob.Height ?? 0)" />
                } else if (Model.SelectedFile != null) {
                    <input type="hidden" name="name" value="@Model.SelectedFile.Name" />
                    <input type="hidden" name="content_url" value="@Model.SelectedFile.ContentUrl()" />
                    <input type="hidden" name="thumb_url" value="@Model.SelectedFile.ThumbPlaceholderUrl().LeftBefore("?")" />
                    <input type="hidden" name="width" value="@(Model.SelectedFile.Blob.Width ?? 0)" />
                    <input type="hidden" name="height" value="@(Model.SelectedFile.Blob.Height ?? 0)" />
                } else {
                    <input type="hidden" name="name" />
                    <input type="hidden" name="file_url" />
                    <input type="hidden" name="thumb_url" />
                    <input type="hidden" name="width" />
                    <input type="hidden" name="height" />
                }

                <div class="buttons">
                    <button type="submit" class="btn btn-primary" id="insert">Insert</button>
                    <button type="button" class="btn btn-secondary" data-shortcut="Esc">Cancel</button>
                </div>
            </form>
        </div>

        <div class="tab-pane" id="nav-attachments">
            <div class="result row p-3">
                @foreach (var file in Model.Attachments) {
                    if (!Model.Image || (Model.Image && FileUtils.IsWebImage(file.Blob.Name))) {
                        <div class="card mr-1" style="width: 96px;">
                            <a href="javascript:;" data-name="@file.Blob.Name" data-file-url="@file.ContentUrl()" data-thumb-url="@file.ThumbPlaceholderUrl().LeftBefore("?")" data-width="@file.Blob.Width" data-height="@file.Blob.Height" title="@file.Blob.Name">
                                <img alt="" src="@file.ThumbUrl(48, 48, fit: FitMode.Crop, scale: ScaleMode.Both)" />
                                <div class="card-block p-1">
                                    <small>@file.Blob.Name.Ellipsis(10)</small>
                                    <div class="meta"><small>@FileUtils.FileSizeAsString(file.Blob.Size)</small></div>
                                </div>
                            </a>
                        </div>
                    }
                }
                @foreach (var blob in Model.Blobs) {
                    if (!Model.Image || (Model.Image && FileUtils.IsWebImage(blob.Name))) {
                        <div class="card mr-1" style="width: 96px;">
                            <a href="javascript:;" data-name="@blob.Name" data-file-url="@blob.ContentUrl()" data-thumb-url="@blob.ThumbPlaceholderUrl().LeftBefore("?")" data-width="@blob.Width" data-height="@blob.Height" title="@blob.Name">
                                <img alt="" src="@blob.ThumbUrl(48, 48, fit: FitMode.Crop, scale: ScaleMode.Both)" />
                                <div class="card-block p-1">
                                    <small>@blob.Name.Ellipsis(10)</small>
                                    @Html.Hidden("blobs", blob.Id)
                                    <div class="meta"><small>@FileUtils.FileSizeAsString(blob.Size)</small></div>
                                </div>
                            </a>
                        </div>
                    }
                }
            </div>
        </div>

        <div class="tab-pane" id="nav-upload">
            <div class="form-group">
                <input type="file" accept="@ConfigurationService.BlobWhitelist" name="files" data-url="@Url.Content("~/a/blobs")" data-single-file-uploads="true" />
                <div class="help-block"></div>
            </div>
        </div>
        <div class="progress progress-fixed"></div>
    </div>
</div>

