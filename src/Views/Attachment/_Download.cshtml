@model Attachment
@{
    var attachment = Model;
    var parent = attachment.Parent;
    var attrs = Html.PreviewAttributes(parent, attachment);
}

<div class="list-group">
    <a class="list-group-item list-group-item-action" href="@attachment.Url()" data-type="attachment" data-id="@attachment.Id" @Html.Raw(attrs.AsHtmlAttributes())>
        <div class="media">
            @Svg.Icon(attachment, size: 48)
            <div class="media-body">
                <h6 class="media-title">@attachment.Blob.Name</h6>
                <small class="text-muted">
                    @if (parent.Type == EntityType.Content) {
                        <text>Uploaded @Html.Time(attachment.ModifiedAt) @T["by"] @attachment.ModifiedBy().GetTitle() –</text>
                    }
                    @if (FileUtils.IsImage(attachment.Blob.Name)) {
                        <text>@(attachment.Blob.Width)x@(attachment.Blob.Height) ·</text>
                    }
                    @FileUtils.FileSizeAsString(attachment.Blob.Size)
                </small>
            </div>
            @if (parent.Type == EntityType.Content && attachment.HasPermission(Permission.Delete)) {
                <div class="media-icons">
                    <div class="dropdown d-inline-block">
                        <button type="button" class="btn btn-icon dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" aria-label="@T["Toggle Dropdown"]">
                            @Svg.Icon("dots-vertical")
                        </button>
                        <div class="dropdown-menu dropdown-menu-right">
                            <button type="button" data-trash="attachment" data-id="@attachment.Id" class="dropdown-item">@Svg.Icon("delete", "danger") @T["Trash"]</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </a>
</div>

